#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
LIGHT_GRAY='\033[0;37m'
DARK_GRAY='\033[1;30m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;31m'
YELLOW='\033[1;33m'
LIGHT_CYAN='\033[1;36m'
WHITE='\033[1;37m'
RESET='\033[0m'

if [[ $# -lt 1 ]]; then
    echo -e "${RED}No arguments provided!${RESET}"
    exit 1
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "?" ]] || [[ "$1" == "--help" ]]; then
    echo -e "${LIGHT_CYAN}Usage:${RESET} ${YELLOW}pivodev {install|build} [options] ${RESET}"
    echo -e "   ${WHITE}pivodev install${RESET} - ${LIGHT_GRAY}install toolsets for specific languages/frameworks${RESET}"
    echo -e "   ${WHITE}pivodev build${RESET} - ${LIGHT_GRAY}build docker image and/or run container with pivodev and git ssh keys preinstalled${RESET}"
    exit 0
fi

if [[ "$1" == "install" ]]; then
    shift

    if [[ "$1" == "-h" ]] || [[ "$1" == "?" ]] || [[ "$1" == "--help" ]]; then
        echo -e "${LIGHT_CYAN}Usage:${RESET} ${YELLOW}pivodev install [toolset_1] [toolset_2] [toolset_3]${RESET}"
        echo -e "  ${LIGHT_GRAY}Avaliable toolsets (each toolset is defined in corresponding bash file at PIVODIR/scripts/):${RESET}"
        echo -e "      ${WHITE}bash${RESET} ${LIGHT_GRAY}- sudo alias + fzf + bat + blesh${RESET}"
        echo -e "      ${WHITE}nvim${RESET} ${LIGHT_GRAY}- nvim + pivodev-nvim${RESET}"
        echo -e "      ${WHITE}vim${RESET} ${LIGHT_GRAY}- vim + pivodev-vim${RESET}"
        echo -e "      ${WHITE}csharp${RESET} ${LIGHT_GRAY}- dotnet sdk/runtime${RESET}"
        echo -e "      ${WHITE}go${RESET} ${LIGHT_GRAY}- standard go${RESET}"
        echo -e "      ${WHITE}latex${RESET} ${LIGHT_GRAY}- texlive + ttf cyrillic lang + dependencies${RESET}"
        echo -e "      ${WHITE}python${RESET} ${LIGHT_GRAY}- pip + python + venv${RESET}"
        exit 0
    fi

    bash=false
    csharp=false
    go=false
    latex=false
    nvim=false
    vim=false
    python=false
    
    for var in "$@"
    do
        if [[ "$var" == *"bash"* ]]; then
            bash=true
        fi
        if [[ "$var" == *"csharp"* ]]; then
            csharp=true
        fi
        if [[ "$var" == *"go"* ]]; then
            go=true
        fi
        if [[ "$var" == *"latex"* ]]; then
            latex=true
        fi
        if [[ "$var" == *"nvim"* ]]; then
            nvim=true
        fi
        if [[ "$var" == *"vim"* ]]; then
            vim=true
        fi
        if [[ "$var" == *"python"* ]]; then
            python=true
        fi
    done

    if $bash; then
        (cd $PIVODIR/scripts && ./bash.sh )
    fi
    if $csharp; then
        (cd $PIVODIR/scripts && ./csharp.sh)
    fi
    if $go; then
        (cd $PIVODIR/scripts && ./go.sh)
    fi
    if $latex; then
        (cd $PIVODIR/scripts && ./latex.sh)
    fi
    if $nvim; then
        (cd $PIVODIR/scripts && ./nvim.sh)
    fi
    if $vim; then
        (cd $PIVODIR/scripts && ./vim.sh)
    fi
    if $python; then
        (cd $PIVODIR/scripts && ./python.sh)
    fi

    echo "To apply changes:"
    echo "source ~/.bashrc"

elif [[ "$1" == "build" ]]; then
    shift
    if [[ "$1" == "-h" ]] || [[ "$1" == "?" ]] || [[ "$1" == "--help" ]]; then
        echo -e "${LIGHT_CYAN}Usage:${RESET} ${YELLOW}pivodev build base${RESET} - builds base image for pivodev containers"
        echo -e "   ${WHITE}pivodev build base${RESET} - ${LIGHT_GRAY}create base pivodev container${RESET}"
        echo -e "   ${WHITE}pivodev build dev${RESET} - ${LIGHT_GRAY}create pivodev container${RESET}"
        exit 0
    fi

    if [[ "$1" == "base" ]]; then
        shift
        if [[ "$1" == "-h" ]] || [[ "$1" == "?" ]] || [[ "$1" == "--help" ]]; then
            echo -e "${LIGHT_CYAN}Usage:${RESET} ${YELLOW}pivodev build base${RESET} - builds base image for pivodev containers"
            exit 0
        fi

        cp $PIVODIR/docker/debian/Dockerfile $PWD/Dockerfile
        build_command='sudo docker build -t pivodev-base --build-arg ssh_prv_key="$(cat ~/.ssh/id_rsa)" --build-arg ssh_pub_key="$(cat ~/.ssh/id_rsa.pub)" --build-arg git_user="$(git config user.name)" --build-arg git_mail="$(git config user.email)" --squash .'
        eval $build_command
        rm $PWD/Dockerfile

    elif [[ "$1" == "dev" ]]; then
        shift
        install_option="-I"
        install="" # install tools via pivodev

        build_option="-b"
        build=false # build/only generate dockerfile

        image_option="-i"
        imgname="pivodev-img" # new image name 

        run_option="-r"
        run=false # create container after image creation

        run_args_option="-a"
        run_args="-dit --network=host"

        contname_option="-c"
        contname="pivodev" # new container name 
        
        clean_files_option="-C"
        clean_files=false  # remove generated files after execution

        if [[ "$1" == "-h" ]] || [[ "$1" == "?" ]] || [[ "$1" == "--help" ]]; then
            echo -e "${LIGHT_CYAN}Usage:${RESET} ${YELLOW}pivodev build dev [options]${RESET}"
            echo -e "  ${LIGHT_GRAY}Options:${RESET}"
            echo -e "      ${WHITE}-I {toolset} ${LIGHT_GRAY}- install predefined toolsets into container${RESET}"    
            echo -e "      ${WHITE}-b ${LIGHT_GRAY}- build image based on generated Dockerfile${RESET}"    
            echo -e "      ${WHITE}-i {image name} ${LIGHT_GRAY}- define custom image name (pivodev-base by default)${RESET}"    
            echo -e "      ${WHITE}-r ${LIGHT_GRAY}- create and run container after image creation${RESET}"    
            echo -e "      ${WHITE}-c {container name} ${LIGHT_GRAY}- provide container name (pivodev by default)${RESET}"    
            echo -e "      ${WHITE}-a \"{docker run aruments}\" ${LIGHT_GRAY}- provide docker run arguments (-dit --network=host by default)${RESET}"    
            echo -e "      ${WHITE}-C ${LIGHT_GRAY}- clean generated files after container creation${RESET}"    
            exit 0
        fi
     
        # parse options
        while [ $# -gt 0 ]
        do
            if [[ "$1" == "$build_option" ]]; then
                build=true
            elif [[ "$1" == "$install_option" ]]; then
                shift
                install="$1;$install"
            elif [[ "$1" == "$image_option" ]]; then 
                shift
                imgname="$1"
            elif [[ "$1" == "$run_option" ]]; then
                run=true
            elif [[ "$1" == "$run_args_option" ]]; then
                shift
                run_args="$1"
            elif [[ "$1" == "$contname_option" ]]; then
                shift
                contname_option="$1"
            elif [[ "$1" == "$clean_files_option" ]]; then
                clean_files=true
            else
                echo -e "${LIGHT_RED}Unable to parse${RESET} $1${LIGHT_RED}!"
                exit 0
            fi
            shift
        done

        # create dockerfile
        touch "$PWD/Dockerfile"
        echo "FROM pivodev-base:latest" >> $PWD/Dockerfile
        echo "RUN echo '<!> THIS IMAGE IS FOR LOCAL DEVELOPMENT CONTAINERS ONLY, DO NOT PUSH IT TO PUBLIC REGISTRIES <!>'" >> $PWD/Dockerfile

        if [[ "$install" == *"bash"* ]]; then
            echo 'RUN ~/.pivodev/scripts/bash.sh' >> $PWD/Dockerfile
        fi
        if [[ "$install" == *"nvim"* ]]; then
            echo 'RUN ~/.pivodev/scripts/nvim.sh' >> $PWD/Dockerfile
        fi
        if [[ "$install" == *"csharp"* ]]; then
            echo 'RUN ~/.pivodev/scripts/csharp.sh' >> $PWD/Dockerfile
        fi
        if [[ "$install" == *"go"* ]]; then
            echo 'RUN ~/.pivodev/scripts/go.sh' >> $PWD/Dockerfile
        fi
        if [[ "$install" == *"latex"* ]]; then
            echo 'RUN ~/.pivodev/scripts/latex.sh' >> $PWD/Dockerfile
        fi
        if [[ "$install" == *"python"* ]]; then
            echo 'RUN ~/.pivodev/scripts/python.sh' >> $PWD/Dockerfile
        fi

        # build
        build_command='sudo docker build -t '$imgname' --squash .'

        if [[ "$build" == false ]]; then
            echo $build_command
        else
            # build image
            eval $build_command
        fi

        # run
        if [[ "$run" == true ]] && [[ "$build" == true ]]; then
            # run container
            run_command='sudo docker run '$run_args' --name '$contname' '$imgname
            eval $run_command
        fi

        # clean files
        if [[ "$clean_files" == true ]]; then
            rm "$PWD/Dockerfile"
        fi
    fi
fi
